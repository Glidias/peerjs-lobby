{
  "name": "duplex-emitter",
  "version": "2.1.2",
  "description": "Duplex Event Emitter",
  "main": "index.js",
  "scripts": {
    "test": "tap tests/*.test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/pgte/duplex-emitter.git"
  },
  "keywords": [
    "event",
    "emitter",
    "stream",
    "duplex",
    "remote"
  ],
  "author": {
    "name": "pgte"
  },
  "contributors": [
    {
      "name": "Pedro Teixeira"
    },
    {
      "name": "Igor Soarez"
    }
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/pgte/duplex-emitter/issues"
  },
  "dependencies": {
    "stream-combiner": "0.0.2",
    "split": "~0.2.6",
    "through": "~2.3.4"
  },
  "devDependencies": {
    "tap": "*"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "readme": "# duplex-emitter\n\n[![Build Status](https://secure.travis-ci.org/pgte/duplex-emitter.png)](http://travis-ci.org/pgte/duplex-emitter)\n\n[![browser support](https://ci.testling.com/pgte/duplex-emitter.png)](https://ci.testling.com/pgte/duplex-emitter)\n\n\nTurns a duplex stream into an event emitter.\n\n## Create\n\n```javascript\nvar s = net.connect(...);\n\nvar duplexEmitter = require('duplex-emitter');\nvar emitter = duplexEmitter(s);\n```\n\n## Emit\n\nYou can emit events. They will be serialized (to JSON) and piped to the stream.\n\n```javascript\nemitter.emit('event1', arg1, arg2); // Send event to the other side\n```\n\n## Receive\n\nYou can listen for events from the peer:\n\n```javascript\n// Got event from the peer\nemitter.on('event2', function(arg1, arg2), {\n  //...\n})\n```",
  "readmeFilename": "README.md",
  "_id": "duplex-emitter@2.1.2",
  "_from": "duplex-emitter@2.1.2",
  "dist": {
    "shasum": "10c9cf2b13a7dbfff6264955dca45396e8e7db5e"
  },
  "_resolved": "https://registry.npmjs.org/duplex-emitter/-/duplex-emitter-2.1.2.tgz"
}
